[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/Building CRC classifier.html",
    "href": "posts/post-with-code/Building CRC classifier.html",
    "title": "Building a CRC classifier using metagenomic data",
    "section": "",
    "text": "This post will explain the steps to build a CRC classifier for early-stage colorectal cancer detection. We will use processed metagenomics data from different cohorts of colorectal cancer. The dataset is available here.\nThe dataset has relative abundance data of different microbial species along with their operation taxonomic unit (OTU). This OTU classifies the microbial species according to kingdom, class, order, phylum, genus, and species. The dataset contains samples from several previously published research studies. You can check this post to learn more about those research studies as well as the dataset."
  },
  {
    "objectID": "posts/post-with-code/Building CRC classifier.html#loading-the-dataset",
    "href": "posts/post-with-code/Building CRC classifier.html#loading-the-dataset",
    "title": "Building a CRC classifier using metagenomic data",
    "section": "Loading the dataset",
    "text": "Loading the dataset\nThe dataset contains 982 samples each with 829 features. These features include metadata information such as body_site, study_condition etc. along with relative abundance data of microbial species in human gut microbiome.\n\n\nShow the code\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom statannotations.Annotator import Annotator\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.exceptions import ConvergenceWarning\nConvergenceWarning('ignore')\n\n# loading tab-seperated data file using pandas\ndata = pd.read_csv('Nine_CRC_cohorts_taxon_profiles.tsv',sep='\\t',header=None).T\n\ndata = data.rename(columns=data.loc[0]).drop(0, axis=0)\ndata.head(5)\n\n\n\n\n\n\n\n\n\n\ndataset_name\nsampleID\nsubjectID\nbody_site\nstudy_condition\ndisease\nage\nage_category\ngender\ncountry\n...\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Circoviridae|g__Gyrovirus|s__Chicken_anemia_virus\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Geminiviridae|g__Mastrevirus|s__Wheat_dwarf_virus\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Hepadnaviridae|g__Orthohepadnavirus|s__Orthohepadnavirus_unclassified\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Inoviridae|g__Inovirus|s__Enterobacteria_phage_I2_2\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Inoviridae|g__Inovirus|s__Enterobacteria_phage_If1\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Polyomaviridae|g__Polyomavirus|s__JC_polyomavirus\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Retroviridae|g__Gammaretrovirus|s__Porcine_type_C_oncovirus\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Retroviridae|g__Retroviridae_noname|s__Avian_endogenous_retrovirus_EAV_HP\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Viruses_noname|g__Viruses_noname|s__Enterobacteria_phage_HK544\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Viruses_noname|g__Viruses_noname|s__Porcine_stool_associated_circular_virus_3\n\n\n\n\n1\nZellerG_2014\nCCIS27304052ST-3-0\nFR-001\nstool\ncontrol\nnone\n52\nadult\nfemale\nFRA\n...\n0.0\n0.61117\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n2\nZellerG_2014\nCCIS13047523ST-4-0\nFR-003\nstool\ncontrol\nnone\n70\nsenior\nmale\nFRA\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0038\n0.0\n0.0\n0.0\n\n\n3\nZellerG_2014\nCCIS15794887ST-4-0\nFR-024\nstool\ncontrol\nnone\n37\nadult\nfemale\nFRA\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n4\nZellerG_2014\nCCIS94603952ST-4-0\nFR-025\nstool\ncontrol\nnone\n80\nsenior\nfemale\nFRA\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n5\nZellerG_2014\nCCIS74726977ST-3-0\nFR-026\nstool\nadenoma\nadenoma\n66\nsenior\nmale\nFRA\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n5 rows × 829 columns\n\n\n\n\nFor our exploration, we will focus on the dataset ZellerG_2014. Our goal is to replicate the findings from Zeller et al. (2014) utilizing their data analysis process. This dataset contains samples from 156 French patients.\n\n\nShow the code\n# accessing Zeller et al., 2014 dataset\nzeller_db = data.loc[data['dataset_name'] == 'ZellerG_2014',:]\n\n# fetching microbacterial organism information-related columns\nbacteria_colnames = [col for col in data.columns if 'k__Bacteria' in col]\n\n# metadata colnames\nmetadata_colnames = ['dataset_name', 'sampleID', 'subjectID', 'body_site', 'study_condition',\n                     'disease', 'age', 'age_category', 'gender', 'country','ajcc','alcohol',\n                     'antibiotics_current_use','curator','disease_subtype','ever_smoke','fobt',\n                     'hba1c','hdl','ldl','location','BMI']"
  },
  {
    "objectID": "posts/post-with-code/Building CRC classifier.html#filtering-of-species",
    "href": "posts/post-with-code/Building CRC classifier.html#filtering-of-species",
    "title": "Building a CRC classifier using metagenomic data",
    "section": "Filtering of species",
    "text": "Filtering of species\nWe will first filter out species having relative abundance less than .001 in any sample. This criteria is taken the study from Zeller et al., 2014, the same study the dataset is from.\nAfter applying this abundance filtering, we now have 214 species in our dataset. We will proceed with our modeling using these filtered species.\n\n\nShow the code\n# dataset containing only bacterial microoganism's relative abundace\nmicrobiome = zeller_db[bacteria_colnames]\n\n\n# change data type from string to float\nfor species in microbiome.columns:\n    microbiome.loc[:,species] = microbiome[species].astype('float32')\n    microbiome.loc[:,species] = microbiome[species].apply(lambda x: x if x &gt;=.001 else np.NaN)\n    \n# removing species having relative abundance less than .001\nmicrobiome_filtered = microbiome.dropna(axis=1,thresh=15)\n\nprint('Number of species after filtering:',microbiome_filtered.shape[0])\n\n\nNumber of species after filtering: 156\n\n\n\n\nShow the code\n\n# functions to process the data and prepare in a format supporting phyloseq analysis\ndef get_sample_table(df):\n    df = df[metadata_colnames]\n    df = df.set_index('subjectID')\n    df.drop(['dataset_name','sampleID'],axis=1,inplace=True)\n    return df\n\ndef get_otu_table(df):\n    df = df[bacteria_colnames + ['subjectID']]\n    df.columns = [\"OTU_{}\".format(str(ind)) for ind, col in enumerate(bacteria_colnames)] + ['subjectID']\n    df.index = df['subjectID']\n    taxa_table = get_taxa_table(bacteria_colnames)\n    return df, taxa_table\n\ndef get_taxa_table(list_of_otus):\n    otu = 0\n    mapping = {}\n    taxa_cols = ['kingdom','phylum','class','order','family','genus','species']\n    df = pd.DataFrame(columns=taxa_cols)\n    otu_mapping = {}\n    otu_ids = []\n    for ind, otu in enumerate(list_of_otus):\n        tmp = {}\n        for col in taxa_cols:\n            tmp[col] = get_specific_label(otu, col)\n        tmp_df = pd.DataFrame([tmp])\n        df = pd.concat([df,tmp_df], ignore_index=[0])\n\n        otu_id = \"OTU_{}\".format(str(ind))\n        otu_mapping[otu] = otu_id\n        otu_ids.append(otu)\n\n    df['OTU'] = ['OTU_{}'.format(str(ind)) for ind in df.index]\n    df = df.set_index('OTU')\n    return df\n\n\ndef get_specific_label(l, t):\n    \"\"\"\n    This function parse the taxonomic assignment lable and fetch the specified information (e.g., kingdom, family)\n\n    Args:\n        l (str): string of taxonomy\n        t (str): string specifying the requested information (e.g., kingdom, family, genus, etc.)\n\n    Returns:\n        str: requested heirarichal info \n    \"\"\"\n    taxa_order = {'kingdom':0,'phylum':1,'class':2,'order':3,'family':4,'genus':5,'species':6}\n\n    try:\n        specific_label = l.split('|')[taxa_order[t]]\n\n        return specific_label.strip().split('__')[1]\n    except:\n        return 'Unknown'\n\n    \ndef get_otu_detail(taxa_table, otu_label, rank):\n    return taxa_table[otu_label][rank]\n\n\ndef aggregate_by_taxonomy(otu_table, taxa_table, taxa_rank):\n    \"\"\"\n    This function aggregate data based on specified \n    taxa rank (e.g., kingdom, class, order, phylum, genus, species).\n    \"\"\"\n    unique_values = (taxa_table[taxa_rank].unique())\n\n    # mapping for otus to unique value of chosen taxa rank\n    taxa_to_otu = {}\n\n    # prepare the mapping\n    for unique_value in unique_values:\n        tdf = taxa_table.loc[taxa_table[taxa_rank] == unique_value, :]\n        otus = tdf.index.to_list()   \n        taxa_to_otu[unique_value.strip()] = otus\n    \n    \n    # create a dictionary for formulating expressions\n    taxa_to_exp = {}\n\n    for key in taxa_to_otu.keys():\n        taxa_to_exp[key] = '{} = 0'.format(key)\n        for otu in taxa_to_otu[key]:\n            taxa_to_exp[key] += ' + ' + otu\n            otu_table[otu] = otu_table[otu].astype('float')\n\n    agg_df = otu_table\n\n    for key, expr in taxa_to_exp.items():\n        agg_df[key] = 0\n        agg_df = agg_df.eval(expr, engine='python')\n        \n    agg_df = agg_df[list(unique_values)]\n    \n    return agg_df"
  },
  {
    "objectID": "posts/post-with-code/Building CRC classifier.html#expanding-target-classes",
    "href": "posts/post-with-code/Building CRC classifier.html#expanding-target-classes",
    "title": "Building a CRC classifier using metagenomic data",
    "section": "Expanding target classes",
    "text": "Expanding target classes\nNow we will expand our target classes for modeling task. In the dataset, column study_condition contains three different types of classes: control, adenoma, and CRC. For our classification task, we will further expand CRC class into two sub-classes: early_stage and late_stage.\nWe will use here the same nomenclature used in Zeller et al. (2014): No neoplasma, Adenoma, Early stage (0/1/2) and Late stage(stage 3/4). The figure below shows the distribution of target class.\n\n\nShow the code\ncolor_palette = {'neoplasma_free':'green',\n                'adenoma':'orange',\n                'early_stage':'#ff6464',\n                'late_stage':'#c80000'}\n\nmetadata = zeller_db[metadata_colnames]\n\nmetadata.loc[:,'class'] = 'neoplasma_free'\nmetadata.loc[metadata['ajcc'].isin(['i','ii']),'class'] = 'early_stage'\nmetadata.loc[metadata['ajcc'].isin(['iii','iv']),'class'] = 'late_stage'\nmetadata.loc[metadata['study_condition'] == 'adenoma','class'] = 'adenoma'\n\nax = sns.countplot(data = metadata, x='class',palette = color_palette, alpha=.7)\nfor p in ax.patches:\n    height = int(p.get_height())\n    ax.text(p.get_x() + p.get_width() / 2., height + 1, f'{height}', \n            ha=\"center\", va=\"center\")\n\n\nplt.ylabel('Cases')\nplt.title(' Target class distribution (total cases: 156)')\nplt.show()"
  },
  {
    "objectID": "posts/post-with-code/Building CRC classifier.html#metadata-exploration",
    "href": "posts/post-with-code/Building CRC classifier.html#metadata-exploration",
    "title": "Building a CRC classifier using metagenomic data",
    "section": "Metadata exploration",
    "text": "Metadata exploration\nWe will now take a step further in our exploration and investigate for statistical differences among target classes in terms of patient demographics.\nWe used Mann-Whitney statistical test to investigate statistical significance of differences. Our results showed that there are The below figures show that there are statistical significant differences between neoplasma free and early stage CRC. These differences were also found between neoplasma free and adenoma.\n\n\n\n\n\n\nAge\n\n\n\nWe noticed statistical differences in age of groups neoplasma-free and early-stage CRC,  and adenoma and early-stage CRC.\n\n\n\n\nShow the code\nfrom statannot import add_stat_annotation\n\n# changing data type of age and BMI\nmetadata['age'] = pd.to_numeric(metadata.age, errors='coerce')\nmetadata['BMI'] = pd.to_numeric(metadata.BMI, errors='coerce')\n\norder = ['neoplasma_free', 'adenoma', 'early_stage', 'late_stage']\nx = 'class'\n\npairs = [\n    ('neoplasma_free','adenoma'),\n    ('neoplasma_free','early_stage'),\n    ('neoplasma_free','late_stage'),\n    ('adenoma','early_stage'),\n    ('adenoma','late_stage'),\n]\n\n\n\nShow the code\n# plotting distribution\n\nfor ind, y in enumerate(['age','BMI']):\n    plt.figure()\n    ax = sns.boxplot(data=metadata, y=y,x=x, palette=color_palette, order= order)\n    #annot = Annotator(ax, pairs=pairs, data=metadata, x=x, y=y, hue=x, hue_order=order, order=order)\n    ax, test_results = add_stat_annotation(ax, box_pairs=pairs, data=metadata, x=x, y=y,\n                                           hue_order=order, order=order,\n                                           test='Mann-Whitney', text_format='star',comparisons_correction=None, \n                                           loc='inside', verbose=False)\n\n    plt.title(f'{y.upper()}')\n\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Age\n\n\n\n\n\n\n\n\n\n\n\n(b) BMI\n\n\n\n\n\n\n\nFigure 1: Age/BMI distribution"
  },
  {
    "objectID": "posts/post-with-code/Building CRC classifier.html#crc-classifier-based-on-metadata",
    "href": "posts/post-with-code/Building CRC classifier.html#crc-classifier-based-on-metadata",
    "title": "Building a CRC classifier using metagenomic data",
    "section": "CRC classifier based on metadata",
    "text": "CRC classifier based on metadata\nNow, we will build a CRC classifier using gender,age and BMI data. This will help us setting a performance baseline for our metagenomic classifier (the one we will build in the later stage using relative abundance data).\nFor this classification task, we will merge control and adenoma into negative class (0) and early and late stages into positive class (1).\n\n\nShow the code\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler, label_binarize\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import roc_curve, auc\n\n# accessing data\nX = metadata[['age','BMI','gender']]\ny = metadata['class']\n\n# reset indices\nX.reset_index(drop=True, inplace=True)\ny.reset_index(drop=True, inplace=True)\n\n# transforming data into numeric format\nX['gender'] = X['gender'].map({'female':0,'male':1})\nX['gender'] = pd.to_numeric(X['gender'], errors='coerce')\nX['age'] = pd.to_numeric(X['age'], errors='coerce')\nX['BMI'] = pd.to_numeric(X['BMI'], errors='coerce')\n\n# mean imputation for missing values\nX = X.interpolate(method='linear')\n#X.drop(['subjectID'],axis=1,inplace=True)\n\n# coverting class into two classes\ny_num = y.map({'neoplasma_free':0, 'adenoma':0, 'early_stage':1, 'late_stage':1})\n\ndef build_classifier(X,y, plot_auc=True, title=\"\"):\n    # Outer validation: 10-fold cross-validation\n    outer_cv = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n\n    # Inner validation: 5-fold cross-validation for hyperparameter tuning\n    inner_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n    # Define a Lasso model (L1-regularized logistic regression)\n    lasso = LogisticRegression(penalty='l1', solver='saga', max_iter=10000, multi_class='multinomial')\n\n    # Set up a pipeline for scaling and training\n    pipeline = Pipeline([\n        ('scaler', StandardScaler()),  # Scale features\n        ('lasso', lasso)\n    ])\n\n    # Nested cross-validation\n    outer_scores = []\n\n    param_grid = {'lasso__C': np.logspace(-3, 3, 10)}  # Test regularization strength\n\n    # Plot ROC curve for each fold\n    plt.figure(figsize=(7, 5))\n    mean_fpr = np.linspace(0, 1, 100)\n    tprs = []\n    aucs = []\n\n    for fold, (train_idx, test_idx) in enumerate(outer_cv.split(X, y), start=1):\n        X_train, X_test = X.iloc[train_idx,:], X.iloc[test_idx,:]\n        y_train, y_test = y[train_idx], y[test_idx]\n\n        # Perform GridSearchCV with 10-fold cross-validation\n        grid_search = GridSearchCV(\n            pipeline, param_grid, scoring='roc_auc_ovr', cv=inner_cv, n_jobs=-1\n        )\n\n        # searching parameters first\n        grid_search.fit(X_train, y_train)\n\n        # Best model and hyperparameter\n        best_model = grid_search.best_estimator_\n        #print(f\"Best Hyperparameter: {grid_search.best_params_}\")\n\n        # Fit the model and predict probabilities\n        best_model.fit(X_train, y_train)\n        y_prob = best_model.predict_proba(X_test)\n\n\n        fpr, tpr, _ = roc_curve(y_test, y_prob[:,1])\n        roc_auc = auc(fpr, tpr)\n\n        aucs.append(roc_auc)\n\n        tprs.append(np.interp(mean_fpr, fpr, tpr))  # Interpolating to the same FPR grid\n        tprs[-1][0] = 0.0  # Ensure TPR starts at 0\n\n        #plt.plot(fpr, tpr, lw=1, alpha=0.7, label=f'Fold {fold} (AUC = {roc_auc:.2f})')\n\n    # Average AUC across classes\n    mean_auc = np.mean(aucs)\n\n    # Plot the mean ROC curve\n    # Calculate mean and standard deviation of TPRs\n    mean_tpr = np.mean(tprs, axis=0)\n    std_tpr = np.std(tprs, axis=0)\n\n    mean_auc = auc(mean_fpr, mean_tpr)\n    \n    if plot_auc:\n\n        # Plot the mean ROC curve\n        plt.plot(mean_fpr, mean_tpr, color='blue', linestyle='--', lw=2, label=f'Mean ROC (AUC = {mean_auc:.2f})')\n\n        # Fill the area between the mean TPR and ±1 standard deviation\n        plt.fill_between(mean_fpr, mean_tpr - std_tpr, mean_tpr + std_tpr, color='blue', alpha=0.2, label='± 1 Std. Dev.')\n\n        \n        \n        # Plot the random chance line\n        plt.plot([0, 1], [0, 1], linestyle='--', color='gray', lw=2, label='Chance')\n\n\n        # Finalize the plot\n        plt.title(title)\n        plt.xlabel('False Positive Rate')\n        plt.ylabel('True Positive Rate')\n        plt.legend(loc='lower right')\n        #plt.grid(alpha=0.3)\n        plt.show()\n        \n    return\n\n\nThe figure below shows AUC performance of our metadata-based model. This model was using age, gender and BMI achieved a performance of .63 AUC. This performance is close to the performance of .62 AUC reported by Zeller et al. (2014).\n\n\nShow the code\nbuild_classifier(X,y_num,title='CRC classifier using gender, age, and BMI (10-Fold CV ROC Curves)')\n\n\n\n\n\n\n\n\nFigure 2: Metadata-based CRC classifier performance (AUC)"
  },
  {
    "objectID": "posts/post-with-code/Building CRC classifier.html#crc-classifier-using-global-metrics-e.g.-alpha-diversity",
    "href": "posts/post-with-code/Building CRC classifier.html#crc-classifier-using-global-metrics-e.g.-alpha-diversity",
    "title": "Building a CRC classifier using metagenomic data",
    "section": "CRC classifier using global metrics (e.g., alpha diversity)",
    "text": "CRC classifier using global metrics (e.g., alpha diversity)\nNow we will extend our feature set by including measures of commmunity composition. For this task, we will utilize different kinds of alpha diversity metrics. These metrices are the following\n\nShannon index\nChao1\nSimpson\nSimpson_e\nFisher alpha\nBerger parker\n\nOur new classifier gained improvement for the classification task for tumor-free patients and CRC patients. The new performance is AUC = .74 using alpha diversity measures at phylum level. The use of same measures but at genus level, however, downgraded the performance (.60 AUC).\nFigure 3 shows the AUC curves for models using alpha diversity measures at genus and phylum levels.\n\n\nShow the code\nfrom skbio.diversity import alpha\n\nphylum_agg = aggregate_by_taxonomy(otu_table, taxa_table, 'phylum')\ngenus_agg = aggregate_by_taxonomy(otu_table, taxa_table, 'genus')\n\ndef extend_with_alpha(df, metadata_features):\n    diversity_measures = pd.DataFrame()\n\n    alpha_diversity_metrics = [\n        \"chao1\",\n        \"shannon\",\n        \"simpson\",\n        \"simpson_e\",\n        \"fisher_alpha\",\n        \"berger_parker\"\n    ]\n\n    shannon_diversity = df.apply(lambda x: alpha.shannon(x), axis=1)\n    chao1_diversity   = df.apply(lambda x: alpha.chao1(x), axis=1)\n    simpson_diversity   = df.apply(lambda x: alpha.simpson(x), axis=1)\n    simpson_e_diversity   = df.apply(lambda x: alpha.simpson_e(x), axis=1)\n    fisher_diversity   = df.apply(lambda x: alpha.fisher_alpha(x), axis=1)\n    berger_parker_diversity   = df.apply(lambda x: alpha.berger_parker_d(x), axis=1)\n\n    diversity_measures['shannon'] = shannon_diversity\n    diversity_measures['chao1'] = chao1_diversity\n    diversity_measures['simpson'] = simpson_diversity\n    diversity_measures['simpson_e'] = simpson_e_diversity\n    diversity_measures['fisher_alpha'] = fisher_diversity\n    diversity_measures['berger_parker'] = berger_parker_diversity\n    \n    X_alpha = diversity_measures.reset_index().drop(['subjectID'], axis=1)\n    X_extended = pd.concat([metadata_features,X_alpha],axis=1)\n    \n    return X_extended\n\nX_genus_alpha = extend_with_alpha(genus_agg, X)\nX_phylum_alpha = extend_with_alpha(phylum_agg, X)\n\n\n\nShow the code\nbuild_classifier(X_genus_alpha, y_num, title='CRC classifier using metadata & alpha diversity (genus)')\nbuild_classifier(X_phylum_alpha, y_num, title='CRC classifier using metadata & alpha diversity (phylum)')\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Area under the ROC cuver (\\(\\alpha\\) measures at Genus level)\n\n\n\n\n\n\n\n\n\n\n\n(b) Area under the ROC cuver (\\(\\alpha\\) measures at Phylum level)\n\n\n\n\n\n\n\nFigure 3: Metadata & microbiol composition metrices CRC classifier performance (AUC)\n\n\n\n\nBuilding metagenomic CRC classifier\nNow, we will move towards building a CRC classifier using relative abudance data of species which we obtained after our filtering (see above for the info).\nWe used 22 microbial species which were selected in Zeller et al. (2014). These species are given below.\nselected_species = [\n    'Fusobacterium_nucleatum',\n    'Eubacterium_rectale',\n    'Eubacterium_ventriosum',\n    'Peptostreptococcus_stomatis',\n    'Porphyromonas_asaccharolytica',\n    'Clostridium_symbiosum',\n    'Clostridium_hylemonae',\n    'Bacteroides_fragilis',\n    'Lactobacillus_salivarius',\n    'Fusobacterium_gonidiaformans',\n    'Lactobacillus_ruminis',\n    'Eubacterium_rectale',\n    'Bacteroides_caccae',\n    'Eubacterium_ventriosum',\n    'Clostridium_scindens',\n    'Eubacterium_eligens',\n    'Bifidobacterium_angulatum',\n    'Dorea_formicigenerans',\n    'Butyrivibrio_crossotus',\n    'Phascolarctobacterium_succinatutens',\n    'Ruminococcus_sp',\n    'Streptococcus_salivarius',\n]\n\n\nShow the code\n# fetching all microbial species \nmicrobiome_org = zeller_db[bacteria_colnames]\n\n# transforming column names to species name\ncolumns_species = [get_specific_label(item, 'species') for item in microbiome_org.columns]\n\nmicrobiome_org.columns = columns_species\n\n# fetching selected species data only\nmicrobiome_selected = microbiome_org[selected_species]\n\nmicrobiome_selected.reset_index(drop=True, inplace=True)\n\nfor col in microbiome_selected:\n    microbiome_selected[col] = microbiome_selected[col].astype('float32')\n\nX_metadata_species = pd.concat([microbiome_selected,X],axis=1)\n\n\n\n\nShow the code\nbuild_classifier(X_metadata_species, y_num, title='CRC classifier using 22 microbial species & metada')\n\n\n/Users/pankaj/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n\n\n\n\n\n\n\n\nFigure 4: Metadata & microbiol species CRC classifier performance (AUC)\n\n\n\n\n\n\n\nShow the code\nX_phylum_alpha_species = pd.concat([X_phylum_alpha, microbiome_selected],axis=1)\n\nbuild_classifier(X_phylum_alpha_species, y_num, \n                 title='CRC classifier using 22 species, alpha measures and metadata')\n\n\n\n\n\n\n\n\nFigure 5: Metadata & microbiol species CRC classifier performance (AUC)"
  },
  {
    "objectID": "posts/post-with-code/Building CRC classifier.html#distribution-of-22-selected-microbial-species-across-different-classes",
    "href": "posts/post-with-code/Building CRC classifier.html#distribution-of-22-selected-microbial-species-across-different-classes",
    "title": "Building a CRC classifier using metagenomic data",
    "section": "Distribution of 22 selected microbial species across different classes",
    "text": "Distribution of 22 selected microbial species across different classes\nThe following figure shows the distribution of selecetd microbial species across different target groups.\n\n\nShow the code\nX_metadata_species = pd.concat([microbiome_selected,metadata.reset_index()],axis=1)\nmelted_df = X_metadata_species.melt(id_vars=[ 'class'],value_vars=selected_species)\n\nmelted_df['value'] = melted_df['value'] + .000001\n\nplt.figure(figsize=(6,20))\nsns.boxplot(data=melted_df, x='value', y='variable', hue='class', palette = color_palette)\nplt.xlabel('Relative abundance (log-scaled)')\nplt.ylabel('Species')\nplt.xscale('log')\nplt.title('Distribution of 22 selected microbial species')\nplt.show()"
  },
  {
    "objectID": "posts/post-with-code/meta_analysis.html",
    "href": "posts/post-with-code/meta_analysis.html",
    "title": "Metagenomic Analysis of Gut Microbiome for their Association with Colorectal Cancer",
    "section": "",
    "text": "This post delves into the field of bioinformatics to illustrate the potential of metagenomic data to predict colorectal cancer. Metagenomics data are produced by high-throughput sequencing machines and typically require a substantial amount of compute and storage resources.\nIn this post, we will utilize processed metagenomics data from different cohorts on colorectal cancer. The dataset (relative abundance) is available here.\nThe relative abundance dataset contains samples from datasets from previous research studies as well as their own datasets. The below table provides a summary of cohorts and their information."
  },
  {
    "objectID": "posts/post-with-code/meta_analysis.html#accessing-abundance-data",
    "href": "posts/post-with-code/meta_analysis.html#accessing-abundance-data",
    "title": "Metagenomic Analysis of Gut Microbiome for their Association with Colorectal Cancer",
    "section": "Accessing abundance data",
    "text": "Accessing abundance data\nHere, we will utilize publicly available processed data of all aforementioned publications. The dataset is publicly available and can be downloaded from here.\nLet’s load the dataset first and then explore it a bit.\n\nLoading the dataset\n\n\nShow the code\nimport pandas as pd\nimport seaborn as sns\ndata = pd.read_csv('Nine_CRC_cohorts_taxon_profiles.tsv',sep='\\t',header=None).T\ndata = data.rename(columns=data.loc[0]).drop(0, axis=0)\ndata.head(5)\n\n\n\n\n\n\n\n\n\n\ndataset_name\nsampleID\nsubjectID\nbody_site\nstudy_condition\ndisease\nage\nage_category\ngender\ncountry\n...\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Circoviridae|g__Gyrovirus|s__Chicken_anemia_virus\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Geminiviridae|g__Mastrevirus|s__Wheat_dwarf_virus\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Hepadnaviridae|g__Orthohepadnavirus|s__Orthohepadnavirus_unclassified\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Inoviridae|g__Inovirus|s__Enterobacteria_phage_I2_2\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Inoviridae|g__Inovirus|s__Enterobacteria_phage_If1\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Polyomaviridae|g__Polyomavirus|s__JC_polyomavirus\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Retroviridae|g__Gammaretrovirus|s__Porcine_type_C_oncovirus\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Retroviridae|g__Retroviridae_noname|s__Avian_endogenous_retrovirus_EAV_HP\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Viruses_noname|g__Viruses_noname|s__Enterobacteria_phage_HK544\nk__Viruses|p__Viruses_noname|c__Viruses_noname|o__Viruses_noname|f__Viruses_noname|g__Viruses_noname|s__Porcine_stool_associated_circular_virus_3\n\n\n\n\n1\nZellerG_2014\nCCIS27304052ST-3-0\nFR-001\nstool\ncontrol\nnone\n52\nadult\nfemale\nFRA\n...\n0.0\n0.61117\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n2\nZellerG_2014\nCCIS13047523ST-4-0\nFR-003\nstool\ncontrol\nnone\n70\nsenior\nmale\nFRA\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0038\n0.0\n0.0\n0.0\n\n\n3\nZellerG_2014\nCCIS15794887ST-4-0\nFR-024\nstool\ncontrol\nnone\n37\nadult\nfemale\nFRA\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n4\nZellerG_2014\nCCIS94603952ST-4-0\nFR-025\nstool\ncontrol\nnone\n80\nsenior\nfemale\nFRA\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n5\nZellerG_2014\nCCIS74726977ST-3-0\nFR-026\nstool\nadenoma\nadenoma\n66\nsenior\nmale\nFRA\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n5 rows × 829 columns\n\n\n\n\nThe processed dataset contains metadata information such as body_site, study_condition along with abundance data of microbial species.\nWe will first start with Zeller et al., 2014 dataset. For that we will perform filtering based on dataset name and extract Bacteria kingdom only.\n\n\nShow the code\n# accessing Zeller et al., 2014 dataset\nzeller_db = data.loc[data['dataset_name'] == 'ZellerG_2014',:]\n\n# fetching microbacterial organism information-related columns\nbacteria_colnames = [col for col in data.columns if 'k__Bacteria' in col]\n\n# metadata colnames\nmetadata_colnames = ['dataset_name', 'sampleID', 'subjectID', 'body_site', 'study_condition',\n       'disease', 'age', 'age_category', 'gender', 'country']\n\n# dataframe with bacterial species\nzeller_b = zeller_db[bacteria_colnames + ['subjectID']]\n\n#zeller_b.columns = bacteria_colnames + ['subjectID']\n\n\n# functions to process the data and prepare in a format supporting phyloseq analysis\ndef get_sample_table(df):\n    df = df[metadata_colnames]\n    df = df.set_index('subjectID')\n    df.drop(['dataset_name','sampleID'],axis=1,inplace=True)\n    return df\n\ndef get_otu_table(df):\n    df = df[bacteria_colnames + ['subjectID']]\n    df.columns = [\"OTU_{}\".format(str(ind)) for ind, col in enumerate(bacteria_colnames)] + ['subjectID']\n    new_header = df['subjectID']\n    df_new = df.drop(['subjectID'],axis=1)\n    df_t = df_new.T\n    df_t.columns = new_header\n    return df_t\n\ndef get_taxa_table(list_of_otus):\n    otu = 0\n    mapping = {}\n    taxa_cols = ['kingdom','phylum','class','order','family','genus','species']\n    df = pd.DataFrame(columns=taxa_cols)\n    otu_mapping = {}\n    otu_ids = []\n    for ind, otu in enumerate(list_of_otus):\n        tmp = {}\n        for col in taxa_cols:\n            tmp[col] = get_specific_label(otu, col)\n        tmp_df = pd.DataFrame([tmp])\n        df = pd.concat([df,tmp_df], ignore_index=[0])\n\n        otu_id = \"OTU_{}\".format(str(ind))\n        otu_mapping[otu] = otu_id\n        otu_ids.append(otu)\n\n    df['OTU'] = ['OTU_{}'.format(str(ind)) for ind in df.index]\n    df = df.set_index('OTU')\n    return df\n\n\ndef get_specific_label(l, t):\n    \"\"\"\n    This function parse the taxonomic assignment lable and fetch the specified information (e.g., kingdom, family)\n\n    Args:\n        l (str): string of taxonomy\n        t (str): string specifying the requested information (e.g., kingdom, family, genus, etc.)\n\n    Returns:\n        str: requested heirarichal info \n    \"\"\"\n    taxa_order = {'kingdom':0,'phylum':1,'class':2,'order':3,'family':4,'genus':5,'species':6}\n\n    try:\n        specific_label = l.split('|')[taxa_order[t]]\n\n        return specific_label.strip().split('__')[1]\n    except:\n        return 'Unknown'\n\n# Seperating data into different files\notu_table = get_otu_table(zeller_db)\ntaxa_table = get_taxa_table(bacteria_colnames)\nsample_table = get_sample_table(zeller_db)\n\notu_table.to_csv('otu_table.csv')\ntaxa_table.to_csv('taxa_table.csv')\nsample_table.to_csv('sample_table.csv')\n\n\n\nOTU table\n\n\n\n\n\n\n\n\n\nsubjectID\nFR-001\nFR-003\nFR-024\nFR-025\nFR-026\nFR-027\nFR-030\nFR-039\nFR-040\nFR-051\n...\nFR-824\nFR-825\nFR-826\nFR-827\nFR-828\nFR-829\nFR-830\nFR-835\nFR-901\nFR-902\n\n\n\n\nOTU_0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\nOTU_1\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\nOTU_2\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\nOTU_3\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\nOTU_4\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n5 rows × 156 columns\n\n\n\n\n\n\nTaxonomy heirarchy table\n\n\n\n\n\n\n\n\n\n\nkingdom\nphylum\nclass\norder\nfamily\ngenus\nspecies\n\n\nOTU\n\n\n\n\n\n\n\n\n\n\n\nOTU_0\nBacteria\nAcidobacteria\nAcidobacteriia\nAcidobacteriales\nAcidobacteriaceae\nGranulicella\nGranulicella_unclassified\n\n\nOTU_1\nBacteria\nActinobacteria\nActinobacteria\nActinomycetales\nActinomycetaceae\nActinobaculum\nActinobaculum_massiliense\n\n\nOTU_2\nBacteria\nActinobacteria\nActinobacteria\nActinomycetales\nActinomycetaceae\nActinobaculum\nActinobaculum_schaalii\n\n\nOTU_3\nBacteria\nActinobacteria\nActinobacteria\nActinomycetales\nActinomycetaceae\nActinobaculum\nActinobaculum_unclassified\n\n\nOTU_4\nBacteria\nActinobacteria\nActinobacteria\nActinomycetales\nActinomycetaceae\nActinomyces\nActinomyces_cardiffensis\n\n\n\n\n\n\n\n\n\n\nSample table\n\n\n\n\n\n\n\n\n\n\nbody_site\nstudy_condition\ndisease\nage\nage_category\ngender\ncountry\n\n\nsubjectID\n\n\n\n\n\n\n\n\n\n\n\nFR-001\nstool\ncontrol\nnone\n52\nadult\nfemale\nFRA\n\n\nFR-003\nstool\ncontrol\nnone\n70\nsenior\nmale\nFRA\n\n\nFR-024\nstool\ncontrol\nnone\n37\nadult\nfemale\nFRA\n\n\nFR-025\nstool\ncontrol\nnone\n80\nsenior\nfemale\nFRA\n\n\nFR-026\nstool\nadenoma\nadenoma\n66\nsenior\nmale\nFRA"
  },
  {
    "objectID": "posts/post-with-code/meta_analysis.html#visualizing-species-distribution-between-healthy-and-crc-patients",
    "href": "posts/post-with-code/meta_analysis.html#visualizing-species-distribution-between-healthy-and-crc-patients",
    "title": "Metagenomic Analysis of Gut Microbiome for their Association with Colorectal Cancer",
    "section": "Visualizing species distribution between healthy and CRC patients",
    "text": "Visualizing species distribution between healthy and CRC patients\nWe will now visualize the distribution of species in the dataset among healthy and CRC patients.\nFor that we will first aggregate data on family level. The table below shows aggregated abundance at phylum rank.\n\n\n\n\n\n\n\n\n\n\nAcidobacteria\nActinobacteria\nBacteroidetes\nCandidatus_Saccharibacteria\nDeferribacteres\nDeinococcus_Thermus\nFirmicutes\nFusobacteria\nProteobacteria\nSpirochaetes\nSynergistetes\nVerrucomicrobia\n\n\nsubjectID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFR-001\n0.0\n0.00000\n17.89904\n0.00000\n0.0\n0.0\n72.93033\n0.0\n0.61829\n0.0\n0.0\n0.55267\n\n\nFR-003\n0.0\n0.13650\n30.21824\n0.01474\n0.0\n0.0\n69.06778\n0.0\n0.55140\n0.0\n0.0\n0.00000\n\n\nFR-024\n0.0\n13.87554\n26.19035\n0.00000\n0.0\n0.0\n59.25760\n0.0\n0.67171\n0.0\n0.0\n0.00000\n\n\nFR-025\n0.0\n9.51098\n16.21552\n0.00000\n0.0\n0.0\n71.98672\n0.0\n2.28680\n0.0\n0.0\n0.00000\n\n\nFR-026\n0.0\n0.41172\n25.24277\n0.00532\n0.0\n0.0\n58.92459\n0.0\n1.17038\n0.0\n0.0\n0.00000\n\n\n\n\n\n\n\n\n\nDistribution at phylum level\nThe below figures visualize the distribution of gut microbiome at phylum rank. We can use these plots to select particular phylum for our further analysis. For example, it can clearly seen that Bacteroides and Firnicutes are two most abundand phylum in the dataset.\n\nShow the code\nphylum_df = phylum_agg.merge(sample_table, left_index=True, right_index=True)\nfrom plotnine import ggplot, aes, geom_boxplot, theme_minimal, labs, facet_wrap\nimport matplotlib.pyplot as plt\n\nmy_pal = {\"control\": \"g\", \"adenoma\": \"b\", \"CRC\":\"r\"}\n\nfor ph in phylum_agg.columns:\n    plt.figure()\n    sns.boxplot(x='study_condition', y=ph, data=phylum_df, palette=my_pal, saturation=0.2, hue='study_condition')\n    plt.title('{} distribution'.format(ph))\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Acidobacteria\n\n\n\n\n\n\n\n\n\n\n\n(b) Actinobacteria\n\n\n\n\n\n\n\n\n\n\n\n(c) Bacteroidetes\n\n\n\n\n\n\n\n\n\n\n\n\n\n(d) Candidatus_Saccharibacteria\n\n\n\n\n\n\n\n\n\n\n\n(e) Deferribacteres\n\n\n\n\n\n\n\n\n\n\n\n(f) Deinococcus_Thermus\n\n\n\n\n\n\n\n\n\n\n\n\n\n(g) Firmicutes\n\n\n\n\n\n\n\n\n\n\n\n(h) Fusobacteria\n\n\n\n\n\n\n\n\n\n\n\n(i) Proteobacteria\n\n\n\n\n\n\n\n\n\n\n\n\n\n(j) Spirochaetes\n\n\n\n\n\n\n\n\n\n\n\n(k) Synergistetes\n\n\n\n\n\n\n\n\n\n\n\n(l) Verrucomicrobia\n\n\n\n\n\n\n\nFigure 1: Distribution at phylum rank\n\n\n\nLet’s move forward with visualization and plot species level distribution for aforemention phylums.\n\n\nDistribution at genus level\nAt this phase, we filtered out genus with less than 3% abundance. Then we plotted distribution at genus level for healthy, adenoma and CRC patients. The figures below show distriution of 8 different types of genus in the dataset whose relative abundance satisfied the criteria (&gt;3%).\n\nShow the code\nfilter_phylum = taxa_table.loc[taxa_table['phylum'].isin(['Bacteroidetes', 'Firmicutes']),:]\n\ngenus_fil = aggregate_by_taxonomy(otu_table,filter_phylum,'genus')\n\ngenus_abund = genus_fil.mean(axis=0).to_dict()\ngenus_list = []\n\nfor genus, value in genus_abund.items():\n    if value &gt; 3:\n        genus_list.append(genus)\n\ngenus_new = genus_fil[genus_list]\n\ngenus_fil_df = genus_new.merge(sample_table, left_index=True, right_index=True)\n\n\nfor ph in genus_new.columns:\n    plt.figure()\n    sns.boxplot(x='study_condition', y=ph, data=genus_fil_df, palette=my_pal, saturation=0.2, hue='study_condition')\n    plt.title('{} distribution'.format(ph))\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Bacteroides\n\n\n\n\n\n\n\n\n\n\n\n(b) Prevotella\n\n\n\n\n\n\n\n\n\n\n\n(c) Eubacterium\n\n\n\n\n\n\n\n\n\n\n\n\n\n(d) Blautia\n\n\n\n\n\n\n\n\n\n\n\n(e) Coprococcus\n\n\n\n\n\n\n\n\n\n\n\n(f) Faecalibacterium\n\n\n\n\n\n\n\n\n\n\n\n\n\n(g) Ruminococcus\n\n\n\n\n\n\n\n\n\n\n\n(h) Subdoligranulum\n\n\n\n\n\n\n\nFigure 2: Distribution at genus rank\n\n\n\n\n\nStatistical significance\nBased on our understanding of different taxa at the genus level, we filtered out 8 different types of genus for our statistical analysis. We will use Kruska Wallis statistical test for testing the null hypothesis that the medians of relative abundance of microbial organisms of our selected genus levels are same.\nThere are two different genus (Eubacterium and Ruminococcus) whose differences among healthy, adenoma and CRC patients were found statistically significant.\n\n\n\nGenus\np_value\n\n\n\n\nBacteroides\n0.195\n\n\nPrevotella\n0.237\n\n\nEubacterium\n0.000\n\n\nBlautia\n0.479\n\n\nCoprococcus\n0.063\n\n\nFaecalibacterium\n0.131\n\n\nRuminococcus\n0.004\n\n\nSubdoligranulum\n0.365\n\n\n\n\n\nAlpha diversity\nWe will now investigate whether their are any differences between healthy, adenoma and CRC patients in terms of alpha diversity.\n\nShow the code\nfor ph in alpha_diversity_metrics:\n    plt.figure()\n    sns.boxplot(x='study_condition', y=ph, data=diversity_df, palette=my_pal, saturation=0.2, hue='study_condition')\n    plt.title('{} metric'.format(ph))\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) chao1\n\n\n\n\n\n\n\n\n\n\n\n(b) shannon\n\n\n\n\n\n\n\n\n\n\n\n(c) simpson\n\n\n\n\n\n\n\n\n\n\n\n\n\n(d) simpson_e\n\n\n\n\n\n\n\n\n\n\n\n(e) fisher_alpha\n\n\n\n\n\n\n\n\n\n\n\n(f) berger_parker\n\n\n\n\n\n\n\nFigure 3: Alpha diversity measures"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "bioinformatics",
    "section": "",
    "text": "Building a CRC classifier using metagenomic data\n\n\n\n\n\n\npython\n\n\nbioinformatics\n\n\nmetagenomics\n\n\ncolorectal cancer\n\n\nmachine learning\n\n\n\n\n\n\n\n\n\nNov 26, 2024\n\n\nPankaj Chejara\n\n\n\n\n\n\n\n\n\n\n\n\nMetagenomic Analysis of Gut Microbiome for their Association with Colorectal Cancer\n\n\n\n\n\n\npython\n\n\nbioinformatics\n\n\nmetagenomics\n\n\ncolorectal cancer\n\n\n\n\n\n\n\n\n\nNov 19, 2024\n\n\nPankaj Chejara\n\n\n\n\n\n\nNo matching items"
  }
]